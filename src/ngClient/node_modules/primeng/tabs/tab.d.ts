import { AfterViewInit, ElementRef, OnDestroy } from '@angular/core';
import { BaseComponent } from 'primeng/basecomponent';
import * as i0 from "@angular/core";
import * as i1 from "primeng/ripple";
/**
 * Defines valid properties in Tab component.
 * @group Components
 */
export declare class Tab extends BaseComponent implements AfterViewInit, OnDestroy {
    /**
     * Value of tab.
     * @defaultValue undefined
     * @group Props
     */
    value: import("@angular/core").ModelSignal<string | number>;
    /**
     * Whether the tab is disabled.
     * @defaultValue false
     * @group Props
     */
    disabled: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    pcTabs: any;
    pcTabList: any;
    el: ElementRef<any>;
    ripple: import("@angular/core").Signal<boolean>;
    id: import("@angular/core").Signal<string>;
    ariaControls: import("@angular/core").Signal<string>;
    active: import("@angular/core").Signal<boolean>;
    tabindex: import("@angular/core").Signal<any>;
    mutationObserver: MutationObserver | undefined;
    onFocus(event: FocusEvent): void;
    onClick(event: MouseEvent): void;
    onKeyDown(event: KeyboardEvent): void;
    ngAfterViewInit(): void;
    onArrowRightKey(event: any): void;
    onArrowLeftKey(event: any): void;
    onHomeKey(event: any): void;
    onEndKey(event: any): void;
    onPageDownKey(event: any): void;
    onPageUpKey(event: any): void;
    onEnterKey(event: any): void;
    findNextTab(tabElement: any, selfCheck?: boolean): any;
    findPrevTab(tabElement: any, selfCheck?: boolean): any;
    findFirstTab(): any;
    findLastTab(): any;
    changeActiveValue(): void;
    changeFocusedTab(event: any, element: any): void;
    scrollInView(element: any): void;
    bindMutationObserver(): void;
    unbindMutationObserver(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<Tab, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<Tab, "p-tab", never, { "value": { "alias": "value"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; }, { "value": "valueChange"; }, never, ["*"], true, [{ directive: typeof i1.Ripple; inputs: {}; outputs: {}; }]>;
}

import { AfterViewInit, DoCheck } from '@angular/core';
import { NgModel } from '@angular/forms';
import { BaseComponent } from 'primeng/basecomponent';
import { Nullable } from 'primeng/ts-helpers';
import { InputTextStyle } from './style/inputtextstyle';
import * as i0 from "@angular/core";
/**
 * InputText directive is an extension to standard input element with theming.
 * @group Components
 */
export declare class InputText extends BaseComponent implements DoCheck, AfterViewInit {
    ngModel: NgModel;
    /**
     * Specifies the input variant of the component.
     * @group Props
     */
    variant: 'filled' | 'outlined';
    /**
     * Spans 100% width of the container when enabled.
     * @group Props
     */
    fluid: boolean | undefined;
    /**
     * Defines the size of the component.
     * @group Props
     */
    pSize: 'large' | 'small';
    filled: Nullable<boolean>;
    _componentStyle: InputTextStyle;
    get hasFluid(): boolean;
    constructor(ngModel: NgModel);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    onInput(): void;
    updateFilledState(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputText, [{ optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<InputText, "[pInputText]", never, { "variant": { "alias": "variant"; "required": false; }; "fluid": { "alias": "fluid"; "required": false; }; "pSize": { "alias": "pSize"; "required": false; }; }, {}, never, never, true, never>;
    static ngAcceptInputType_fluid: unknown;
}
export declare class InputTextModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<InputTextModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<InputTextModule, never, [typeof InputText], [typeof InputText]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<InputTextModule>;
}

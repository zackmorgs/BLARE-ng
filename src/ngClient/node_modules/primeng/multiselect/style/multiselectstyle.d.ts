import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
export declare class MultiSelectStyle extends BaseStyle {
    name: string;
    theme: ({ dt }: {
        dt: any;
    }) => string;
    classes: {
        root: ({ instance }: {
            instance: any;
        }) => {
            'p-multiselect p-component p-inputwrapper': boolean;
            'p-multiselect-display-chip': boolean;
            'p-disabled': any;
            'p-invalid': any;
            'p-variant-filled': boolean;
            'p-focus': any;
            'p-inputwrapper-filled': any;
            'p-inputwrapper-focus': any;
            'p-multiselect-open': any;
            'p-multiselect-fluid': any;
            'p-multiselect-sm p-inputfield-sm': boolean;
            'p-multiselect-lg p-inputfield-lg': boolean;
        };
        labelContainer: string;
        label: ({ instance }: {
            instance: any;
        }) => {
            'p-multiselect-label': boolean;
            'p-placeholder': boolean;
            'p-multiselect-label-empty': boolean;
        };
        chipItem: string;
        pcChip: string;
        chipIcon: string;
        dropdown: string;
        loadingIcon: string;
        dropdownIcon: string;
        overlay: string;
        header: string;
        pcFilterContainer: string;
        pcFilter: string;
        listContainer: string;
        list: string;
        optionGroup: string;
        option: ({ instance, option, index, getItemOptions }: {
            instance: any;
            option: any;
            index: any;
            getItemOptions: any;
        }) => {
            'p-multiselect-option': boolean;
            'p-multiselect-option-selected': any;
            'p-focus': boolean;
            'p-disabled': any;
        };
        emptyMessage: string;
    };
    inlineStyles: {
        root: ({ props }: {
            props: any;
        }) => {
            position: string;
        };
    };
    static ɵfac: i0.ɵɵFactoryDeclaration<MultiSelectStyle, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MultiSelectStyle>;
}
/**
 *
 * MultiSelect is used to select multiple items from a collection.
 *
 * [Live Demo](https://www.primeng.org/multiselect/)
 *
 * @module multiselectstyle
 *
 */
export declare enum MultiSelectClasses {
    /**
     * Class name of the root element
     */
    root = "p-multiselect",
    /**
     * Class name of the label container element
     */
    labelContainer = "p-multiselect-label-container",
    /**
     * Class name of the label element
     */
    label = "p-multiselect-label",
    /**
     * Class name of the chip item element
     */
    chipItem = "p-multiselect-chip-item",
    /**
     * Class name of the chip element
     */
    pcChip = "p-multiselect-chip",
    /**
     * Class name of the chip icon element
     */
    chipIcon = "p-multiselect-chip-icon",
    /**
     * Class name of the dropdown element
     */
    dropdown = "p-multiselect-dropdown",
    /**
     * Class name of the loading icon element
     */
    loadingIcon = "p-multiselect-loading-icon",
    /**
     * Class name of the dropdown icon element
     */
    dropdownIcon = "p-multiselect-dropdown-icon",
    /**
     * Class name of the overlay element
     */
    overlay = "p-multiselect-overlay",
    /**
     * Class name of the header element
     */
    header = "p-multiselect-header",
    /**
     * Class name of the filter container element
     */
    pcFilterContainer = "p-multiselect-filter-container",
    /**
     * Class name of the filter element
     */
    pcFilter = "p-multiselect-filter",
    /**
     * Class name of the list container element
     */
    listContainer = "p-multiselect-list-container",
    /**
     * Class name of the list element
     */
    list = "p-multiselect-list",
    /**
     * Class name of the option group element
     */
    optionGroup = "p-multiselect-option-group",
    /**
     * Class name of the option element
     */
    option = "p-multiselect-option",
    /**
     * Class name of the empty message element
     */
    emptyMessage = "p-multiselect-empty-message"
}
export interface MultiSelectStyle extends BaseStyle {
}
